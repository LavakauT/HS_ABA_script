# down
down <- read.table(paste(p_down, paste0(range$treatment[i], '_', range$base[i], '_d.txt'), sep = '/'), header = T) %>%
dplyr::rename(peaks = x) %>%
mutate(group = paste('D', '_HS', range$treatment[i]))
sum <- rbind(sum, up) %>%
rbind(., down)
}else{
z <- i + 3
up <- data.frame(peaks = unique(c(read.table(paste(p_up, paste0(range$treatment[i], '_', range$base[i], '_u.txt'), sep = '/'), header = T) %>% pull(),
read.table(paste(p_up, paste0(range$treatment[z], '_', range$base[z], '_u.txt'), sep = '/'), header = T) %>% pull()))) %>%
mutate(group = paste('U', '_HS', range$treatment[i]))
# down
down <- data.frame(peaks = unique(c(read.table(paste(p_down, paste0(range$treatment[i], '_', range$base[i], '_d.txt'), sep = '/'), header = T) %>% pull(),
read.table(paste(p_down, paste0(range$treatment[z], '_', range$base[z], '_d.txt'), sep = '/'), header = T) %>% pull()))) %>%
mutate(group = paste('D', '_HS', range$treatment[i]))
sum <- rbind(sum, up) %>%
rbind(., down)
}
}
sum <- data.frame()
for (i in 1:4) {
if(i == 1){
# up
up <- read.table(paste(p_up, paste0(range$treatment[i], '_', range$base[i], '_u.txt'), sep = '/'), header = T) %>%
dplyr::rename(peaks = x) %>%
mutate(group = paste('U_HS',range$treatment[i]))
# down
down <- read.table(paste(p_down, paste0(range$treatment[i], '_', range$base[i], '_d.txt'), sep = '/'), header = T) %>%
dplyr::rename(peaks = x) %>%
mutate(group = paste('D_HS', range$treatment[i]))
sum <- rbind(sum, up) %>%
rbind(., down)
}else{
z <- i + 3
up <- data.frame(peaks = unique(c(read.table(paste(p_up, paste0(range$treatment[i], '_', range$base[i], '_u.txt'), sep = '/'), header = T) %>% pull(),
read.table(paste(p_up, paste0(range$treatment[z], '_', range$base[z], '_u.txt'), sep = '/'), header = T) %>% pull()))) %>%
mutate(group = paste('U_HS', range$treatment[i]))
# down
down <- data.frame(peaks = unique(c(read.table(paste(p_down, paste0(range$treatment[i], '_', range$base[i], '_d.txt'), sep = '/'), header = T) %>% pull(),
read.table(paste(p_down, paste0(range$treatment[z], '_', range$base[z], '_d.txt'), sep = '/'), header = T) %>% pull()))) %>%
mutate(group = paste('D_HS', range$treatment[i]))
sum <- rbind(sum, up) %>%
rbind(., down)
}
}
sum$group <- str_replace(sum$group, 'Tak1_HS|hsfa_HS|hsfb_HS|dko_HS', 'T|a|b|d')
View(sum)
sum <- data.frame()
for (i in 1:4) {
if(i == 1){
# up
up <- read.table(paste(p_up, paste0(range$treatment[i], '_', range$base[i], '_u.txt'), sep = '/'), header = T) %>%
dplyr::rename(peaks = x) %>%
mutate(group = paste('U_HS',range$treatment[i]))
# down
down <- read.table(paste(p_down, paste0(range$treatment[i], '_', range$base[i], '_d.txt'), sep = '/'), header = T) %>%
dplyr::rename(peaks = x) %>%
mutate(group = paste('D_HS', range$treatment[i]))
sum <- rbind(sum, up) %>%
rbind(., down)
}else{
z <- i + 3
up <- data.frame(peaks = unique(c(read.table(paste(p_up, paste0(range$treatment[i], '_', range$base[i], '_u.txt'), sep = '/'), header = T) %>% pull(),
read.table(paste(p_up, paste0(range$treatment[z], '_', range$base[z], '_u.txt'), sep = '/'), header = T) %>% pull()))) %>%
mutate(group = paste('U_HS', range$treatment[i]))
# down
down <- data.frame(peaks = unique(c(read.table(paste(p_down, paste0(range$treatment[i], '_', range$base[i], '_d.txt'), sep = '/'), header = T) %>% pull(),
read.table(paste(p_down, paste0(range$treatment[z], '_', range$base[z], '_d.txt'), sep = '/'), header = T) %>% pull()))) %>%
mutate(group = paste('D_HS', range$treatment[i]))
sum <- rbind(sum, up) %>%
rbind(., down)
}
}
sum$group <- str_replace(sum$group, 'Tak1_HS', 'T')
sum$group <- str_replace(sum$group, 'hsfa_HS', 'a')
sum$group <- str_replace(sum$group, 'hsfb_HS', 'b')
sum$group <- str_replace(sum$group, 'dko_HS', 'd')
View(sum)
write.table(sum, '/Users/user/Desktop/f1/All_DEPs.txt',
row.names = F, quote = F, sep = '\t')
deg <- read.delim('/Users/user/Desktop/f1/All_DEPs.txt') %>%
mutate(expression = str_remove(group, '_.*')) %>%
spread(., key = 'group', value = 'expression') %>%
gather(., key = 'group', value = 'expression', -peaks) %>%
mutate(group = str_remove(group, '.*(?=\\s)')) %>%
distinct() %>%
filter(!is.na(expression))
View(deg)
#!!Notice: we have not determine how to deal with comflict expression genes
deg$dup <- deg %>%
select(peaks, group, expression) %>%
duplicated()
deg <- deg %>%
filter(dup != T) %>%
select(-dup) %>%
spread(., key = 'group', value = 'expression')
deg <- read.delim('/Users/user/Desktop/f1/All_DEPs.txt') %>%
mutate(expression = str_remove(group, '_.*')) %>%
spread(., key = 'group', value = 'expression') %>%
gather(., key = 'group', value = 'expression', -peaks) %>%
mutate(group = str_remove(group, '.*(?=\\s)')) %>%
distinct() %>%
filter(!is.na(expression))
#!!Notice: we have not determine how to deal with comflict expression genes
deg$dup <- deg %>%
select(peaks, group) %>%
duplicated()
deg <- deg %>%
filter(dup != T) %>%
select(-dup) %>%
spread(., key = 'group', value = 'expression')
hs_t <- full_join(deg, clu)
View(clu)
hs_t <- full_join(deg, clu %>% dplyr::rename(peaks = peak))
hs_t[is.na(hs_t)] <- ''
View(hs_t)
Txdb_gtf <- makeTxDbFromGFF('/Users/user/Documents/ATAC-seq/marchantia/HS/dataset/MpTak_v6.1r1.gff')
library(GenomicFeatures)
library(ChIPseeker)
Txdb_gtf <- makeTxDbFromGFF('/Users/user/Documents/ATAC-seq/marchantia/HS/dataset/MpTak_v6.1r1.gff')
# extract Chr, Start, End, Peak name
hs_t %>%
dplyr::select(peaks) %>%
mutate(temp = peaks) %>%
separate(., col = 'temp', into = c('Chr', 'Start', 'End'), sep = '\\.')
# extract Chr, Start, End, Peak name
hs_t %>%
dplyr::select(peaks) %>%
mutate(temp = peaks) %>%
separate(., col = 'temp', into = c('Chr', 'Start', 'End'), sep = '\\.') %>%
relocate(Chr, Start, End, peaks)
# extract Chr, Start, End, Peak name
data <- hs_t %>%
dplyr::select(peaks) %>%
mutate(temp = peaks) %>%
separate(., col = 'temp', into = c('Chr', 'Start', 'End'), sep = '\\.') %>%
relocate(Chr, Start, End, peaks)
# make GRanges data
gr <- makeGRangesFromDataFrame(data, keep.extra.columns=T)
# annotate
peakAnno <- annotatePeak(gr,
tssRegion=c(-1500, 1500),
genomicAnnotationPriority = c("Promoter", "5UTR", "3UTR", "Exon", "Intron", "Downstream", "Intergenic"),
TxDb=Txdb_gtf,
level ='gene')
# export peaks annotation
peakAnno
peakAnno@anno
# export peaks annotation
peakAnno
peakAnno@anno
peakAnno_tb <- as_tibble(peakAnno@anno) %>%
mutate(`distanceToTSS (log10)` = log10((abs(distanceToTSS)/1000) + 1))
View(peakAnno_tb)
hs_t %>%
rbind(., peakAnno_tb %>% dplyr::select(peaks, geneId, annotation))
hs_t %>%
merge(., peakAnno_tb %>% dplyr::select(peaks, geneId, annotation))
hs_t <- hs_t %>%
merge(., peakAnno_tb %>% dplyr::select(peaks, geneId, annotation))
View(hs_t)
# plantTFDB database for transcription factors annotation----------------
# before mapping the TF send the all new version genes to MP.database for old version
# load the converted ID file
mr.tf <- read.delim('/Users/user/Desktop/f4/MpTak_v6.1_TF.txt') %>%
distinct(.keep_all = TRUE)
id.conv <- hs_t
id.conv <- id.conv %>%
rename(ID = geneId)
id.conv <- id.conv %>%
dplyr::rename(ID = geneId)
id.conv <- left_join(id.conv, mr.tf, by = 'ID') %>% distinct()
View(id.conv)
# combine the msg.2 with transcription annotation
attr <- id.conv
attr[is.na(attr)] <- ''
View(attr)
# RESTRICT THE CANDIDATE REGULATORS (according to the msg.3, we know some of the genes are TFS)
input.genes <- attr %>%
filter(TF != '',
annotation != 'DIstal Intergenic') %>%
dplyr::select('peaks') %>%
distinct()
# out of bounds: solv: inner_join
all.genes <- attr %>%
dplyr::select(peaks) %>%
distinct()
View(vst)
expr.matrix <- vst %>%
dplyr::rename(peaks = peak) %>%
filter(peaks %in% all.genes$peaks)
View(expr.matrix)
expr.matrix <- inner_join(all.genes, expr.matrix, by = 'peaks')
input.genes <- inner_join(expr.matrix, input.genes, by = 'peaks') %>%
dplyr::select('peaks') %>%
pull()
expr.matrix <- expr.matrix %>%
column_to_rownames(var = 'peaks') %>%
as.matrix()
weight.matrix.tf <- GENIE3(expr.matrix, regulators = input.genes)
gc()
link.list <- getLinkList(weight.matrix.tf, threshold = 0.01)
qua <- data.frame(quantile = quantile(link.list$weight, c(0.25, 0.5, 0.75)))
link.list <- getLinkList(weight.matrix.tf, threshold = qua[1,])
write.delim(link.list, '/Users/user/Desktop/f4/peak_hclust/genie3_tf_low.txt')
link.list <- getLinkList(weight.matrix.tf, threshold = qua[2,])
head(link.list)
write.delim(link.list, '/Users/user/Desktop/f4/peak_hclust/genie3_tf_medium.txt')
link.list <- getLinkList(weight.matrix.tf, threshold = qua[3,])
head(link.list)
write.delim(link.list, '/Users/user/Desktop/f4/peak_hclust/genie3_tf_high.txt')
write.table(attr, '/Users/user/Desktop/f4/peak_hclust/genie3_node.txt',
row.names = F, quote = F, sep = '\t')
View(expr.matrix)
# ARACNe--------------
matrix <- rownames_to_column(as.data.frame(expr.matrix), var = 'peaks')
write.delim(matrix,
'/Users/user/ARACNe-AP-master/peak_hclust/expr.txt',
row.names = FALSE)
write.delim(input.genes, '/Users/user/ARACNe-AP-master/peak_hclust/tfs.txt')
#####################
library(dplyr)
library(tibble)
library(universalmotif)
library(stringr)
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
library(gridtext)
#####################
dap <- read_meme('/Users/user/Downloads/motif_databases/CIS-BP_2.00/Anopheles_arabiensis.meme')
View(dap)
motif <- read_meme('/Users/user/Desktop/dap/macs2_narroPeak_copy/meme.txt_0.01_DAP-seq')
View(motif)
comparisons <- compare_motifs(c(motif, dap),
method = "PCC",
min.mean.ic = 0,
score.strat = "a.mean")
View(comparisons)
# remove pCRE to pCRE PCC
comparisons2 <- comparisons[-c(1:length(motif)), ]
View(comparisons2)
dap <- read_meme('/Users/user/Documents/kmers_data/GRN/script/arabidopsis/similarity/ArabidopsisDAPv1.meme')
comparisons <- compare_motifs(c(motif, dap),
method = "PCC",
min.mean.ic = 0,
score.strat = "a.mean")
# remove pCRE to pCRE PCC
comparisons2 <- comparisons[-c(1:length(motif)), ]
View(comparisons2)
for (i in seq_along(1:length(motif))) {
if(i == 1){
df <- data.frame(comparisons2[,i])
cname <- list.motif[[i]]@name
colnames(df) <- cname
rname <- row.names(df)
df$motif <- rname
df <- df[order(-df[,1]), ] # top similar motif
df <- df[1,c('motif', cname)]
row.names(df) <- 1
} else {
df2 <- data.frame(comparisons2[,i])
cname2 <- list.motif[[i]]@name
colnames(df2) <- cname2
rname2 <- row.names(df2)
df2$motif <- rname2
df2 <- df2[order(-df2[,1]), ] # top similar motif
df2 <- df2[1,c('motif', cname2)]
row.names(df2) <- 1
df <- full_join(df, df2, by = 'motif')
}
}
for (i in seq_along(1:length(motif))) {
if(i == 1){
df <- data.frame(comparisons2[,i])
cname <- motif[[i]]@name
colnames(df) <- cname
rname <- row.names(df)
df$motif <- rname
df <- df[order(-df[,1]), ] # top similar motif
df <- df[1,c('motif', cname)]
row.names(df) <- 1
} else {
df2 <- data.frame(comparisons2[,i])
cname2 <- motif[[i]]@name
colnames(df2) <- cname2
rname2 <- row.names(df2)
df2$motif <- rname2
df2 <- df2[order(-df2[,1]), ] # top similar motif
df2 <- df2[1,c('motif', cname2)]
row.names(df2) <- 1
df <- full_join(df, df2, by = 'motif')
}
}
df3 <- gather(df, key = 'kmers', value = 'PCC', -motif) %>%
rename(match = motif)
View(df)
df3 <- gather(df, key = 'dap-seq_motifs', value = 'PCC', -motif) %>%
dplyr::rename(match = motif)
View(df3)
df3 <- df3 %>% filter(PCC != '')
#####################
### result export ##
#####################
# DAP motif family
motif.family <- df3
string <- motif.family$match
motif.family$motif <- string
motif.family <- motif.family %>%
group_by(`dap-seq_motifs`, motif) %>%
distinct() %>%
summarise_all(median)
motif.family <- motif.family %>%
column_to_rownames(var = 'kmers')
motif.family <- motif.family %>%
column_to_rownames(var = 'dap-seq_motifs')
View(motif.family)
# DAP only
tnt <- str_locate(motif.family$motif, '\\_') %>%
data.frame()
tnt$end <- (tnt$end)-1
tnt$start <- 1
motif.family$motif <- str_sub(motif.family$motif,
start = tnt$start,
end = tnt$end)
output <- data.frame(motif.family)
output <- rownames_to_column(output, var = 'dap-seq_motifs')
View(output)
output <- output %>%
dplyr::rename(family = motif)
write.table(output,
'/Users/user/Desktop/dap/macs2_narroPeak_copy/meme.txt_0.01_DAP-seq_top_sim_dap.txt',
row.names = F, quote = F, sep = '\t')
############
library(dplyr)
library(tidyverse)
library(ggplot2)
library(circlize)
library(ComplexHeatmap)
library(Biostrings)
library(stringr)
library(GenomicFeatures)
library(ChIPseeker)
library(DESeq2)
# Set Options
options(stringsAsFactors = F)
############
#####################
library(dplyr)
library(tibble)
library(universalmotif)
library(stringr)
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
library(gridtext)
###### combine bed for TOBIAS ######
path_whole <- '/Users/user/Desktop/tomato_atac/bed'
whole_beds <- list.files(path = path_whole,
full.names = T,
recursive = F)
whole_beds
file=whole_beds[1]
temp <- read.delim(file, header = F)
View(temp)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
bed <- data.frame()
for (file in whole_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed <- rbind(bed, temp)
}
View(bed)
write.table(bed, file = paste0(path, '/', 'DE_peaks_hclust_available.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
# proximal only
path_pro <- '/Users/user/Desktop/tomato_atac/bed_proximal'
pro_beds <- list.files(path = path_whole,
full.names = T,
recursive = F)
# proximal only
path_pro <- '/Users/user/Desktop/tomato_atac/bed_proximal'
pro_beds <- list.files(path = path_whole,
full.names = T,
recursive = F)
bed_pro <- data.frame()
for (file in pro_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed_pro <- rbind(bed_pro, temp)
}
write.table(bed_pro, file = paste0(path, '/', 'DE_peaks_hclust_available_proximal.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
# proximal only
path_pro <- '/Users/user/Desktop/tomato_atac/bed_proximal'
pro_beds <- list.files(path = path_pro,
full.names = T,
recursive = F)
bed_pro <- data.frame()
for (file in pro_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed_pro <- rbind(bed_pro, temp)
}
write.table(bed_pro, file = paste0(path, '/', 'DE_peaks_hclust_available_proximal.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
View(bed_pro)
# proximal only
path_pro <- '/Users/user/Desktop/tomato_atac/bed_proximal'
pro_beds <- list.files(path = path_pro,
full.names = T,
recursive = F)
bed_pro <- data.frame()
for (file in pro_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed_pro <- rbind(bed_pro, temp)
}
write.table(bed_pro, file = paste0(path, '/', 'DE_peaks_hclust_available_proximal.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
# distal only
path_dis <- '/Users/user/Desktop/tomato_atac/bed_distal'
dis_beds <- list.files(path = path_dis,
full.names = T,
recursive = F)
# distal only
path_dis <- '/Users/user/Desktop/tomato_atac/bed_distal'
dis_beds <- list.files(path = path_dis,
full.names = T,
recursive = F)
bed_dis <- data.frame()
for (file in pro_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed_dis <- rbind(bed_dis, temp)
}
write.table(bed_dis, file = paste0(path, '/', 'DE_peaks_hclust_available_distal.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
path
###### combine bed for TOBIAS ######
path <- '/Users/user/Desktop/tomato_atac'
path_whole <- '/Users/user/Desktop/tomato_atac/bed'
whole_beds <- list.files(path = path_whole,
full.names = T,
recursive = F)
bed <- data.frame()
for (file in whole_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed <- rbind(bed, temp)
}
write.table(bed, file = paste0(path, '/', 'DE_peaks_hclust_available.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
# proximal only
path_pro <- '/Users/user/Desktop/tomato_atac/bed_proximal'
pro_beds <- list.files(path = path_pro,
full.names = T,
recursive = F)
bed_pro <- data.frame()
for (file in pro_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed_pro <- rbind(bed_pro, temp)
}
write.table(bed_pro, file = paste0(path, '/', 'DE_peaks_hclust_available_proximal.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
# distal only
path_dis <- '/Users/user/Desktop/tomato_atac/bed_distal'
dis_beds <- list.files(path = path_dis,
full.names = T,
recursive = F)
bed_dis <- data.frame()
for (file in pro_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed_dis <- rbind(bed_dis, temp)
}
write.table(bed_dis, file = paste0(path, '/', 'DE_peaks_hclust_available_distal.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
# distal only
path_dis <- '/Users/user/Desktop/tomato_atac/bed_distal'
dis_beds <- list.files(path = path_dis,
full.names = T,
recursive = F)
bed_dis <- data.frame()
for (file in dis_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed_dis <- rbind(bed_dis, temp)
}
path_dis <- '/Users/user/Desktop/tomato_atac/bed_distal'
dis_beds <- list.files(path = path_dis,
full.names = T,
recursive = F)
bed_dis <- data.frame()
for (file in dis_beds) {
temp <- read.delim(file, header = F)
names(temp) <- c('chr', 'start', 'end', 'length', 'strand')
# append
bed_dis <- rbind(bed_dis, temp)
}
write.table(bed_dis, file = paste0(path, '/', 'DE_peaks_hclust_available_distal.bed'),
row.names = F, col.names = F, quote = F, sep = '\t')
